<?php
/* 
    Дан массив целых чисел nums и целевое число target, вернуть индексы двух чисел таким образом, чтобы они в сумме давали target.
    Можно предположить, что каждый вход будет иметь ровно одно решение, и нельзя использовать один и тот же элемент дважды.
    Вы можете вернуть ответ в любом порядке.

    Пример 1:
    Input: nums = [2,7,11,15], target = 9
    Output: [0,1]
    Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
    
    Пример 2:
    Input: nums = [3,2,4], target = 6
    Output: [1,2]
    Example 3:

    Input: nums = [3,3], target = 6
    Output: [0,1]
    

    Ограничения:

    2 <= nums.length <= 104
    -109 <= nums[i] <= 109
    -109 <= target <= 109
    Существует только один допустимый ответ.
*/
// Самое не эффективное решение - моё (полный перебор)
function twoSum1($nums, $target) {
    $res = [];
    for ($n = 0; $n < count($nums) - 1; $n++){
        for ($m = 1; $m <= count($nums); $m++){
            if(($nums[$n] + $nums[$m]) == $target){
                $res[] = $n;
                $res[] = $m;
                break 2;
            }
        }
    }
    return $res;
}

$nums = [2,5,5,11];
$target = 10;

print_r(twoSum1($nums, $target));
echo '<br>';

// Самое эффективное решение - определение недостающего числа и его поиск в новом массиве, где индексы и значения поменяли местами
// Т.к нам в любом случае нужно 2 числа, пока мы добавляем числа в новый массив при переходе к новому числу мы найдём его пару из прошлых, записанных в новый массив
function twoSum2($nums, $target) {
    $map = []; // Для хранения индекса каждого числа

    foreach ($nums as $index => $num) {
        $complement = $target - $num; // 10 - 2 = 8
        
        if (isset($map[$complement])) {
            return [$map[$complement], $index]; // Возвращаем индексы, если дополнение существует
        }
        //maps[2] = 0
        //maps[5] = 1
        $map[$num] = $index; // Сохраняем текущий номер вместе с его индексом
    }
    return []; // Возвращаем пустой массив, если решение не найдено
}

print_r(twoSum2($nums, $target));
?>